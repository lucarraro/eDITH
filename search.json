[{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"An introduction to eDITH","text":"eDITH (eDNA Integrating Transport Hydrology) allows spatially explicit interpretation prediction environmental DNA (eDNA) data collected river networks. implements eDITH model, couples geomorphological hydrological characterization catchment, eDNA transport decay dynamics, species distribution model, transform pointwise water eDNA data (sensu (Pawlowski, Apothéloz-Perret-Gentil, Altermatt 2020)) collected catchment space-filling predicted maps taxon density. Features: provides estimations detection probability number taxa across whole catchment based spatially replicated eDNA data taxa. can handle DNA concentration data (e.g., qPCR) metabarcoding (read counts) data taxonomic group, can used predict space-filling maps density taxa (say, species, genus family level), OTUs (Operational Taxonomic Units) ASVs (Amplicon Sequence Variants). Model fit can performed via Bayesian techniques optimization algorithms. Covariates can specified user /selected means Asymmetric Eigenvector Maps (AEMs). interface DHARMa package residual diagnostics provided. eDITH requires use river networks defined river objects, can built via rivnet package.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"installing-the-package","dir":"Articles","previous_headings":"","what":"Installing the package","title":"An introduction to eDITH","text":"eDITH can installed CRAN: development version can installed Github: Among packages, eDITH depends rivnet, turn depends traudem package. traudem relies TauDEM library. traudem provides guide correct installation TauDEM dependencies different operating systems, offers wrapper commands call TauDEM methods R. Please read traudem documentation carefully.","code":"install.packages(\"eDITH\") devtools::install_github(\"lucarraro/eDITH\")"},{"path":[]},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"overview-and-underlying-assumptions","dir":"Articles","previous_headings":"The eDITH model in a nutshell","what":"Overview and underlying assumptions","title":"An introduction to eDITH","text":"eDITH model (Carraro et al. 2018; Carraro, Mächler, et al. 2020; Carraro, Stauffer, Altermatt 2021; Carraro, Blackman, Altermatt 2023) makes use spatially replicated eDNA measurements within river network infer spatial distribution taxon (OTU, ASV; hereafter simply “taxon”) interest across river network. key underlying concept eDNA particles advected downstream streamflow, hence eDNA sample representative location taken, provides information taxon abundance (case qPCR single-species data) biodiversity (metabarcoding data) certain area upstream sampling location. exploiting information multiple sampling sites distributed space, embedding model transport concurrent decay DNA, eDITH model able disentangle various sources DNA shedding (hence, target taxon’s abundance). result, eDITH complements pointwise eDNA measurements projecting taxon distributions (thus biodiversity information) space-filling catchment maps.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"dna-production-and-decay-rates","dir":"Articles","previous_headings":"The eDITH model in a nutshell > Overview and underlying assumptions","what":"DNA production and decay rates","title":"An introduction to eDITH","text":"DNA production (.e., shedding) rate taxon stream water assumed proportional density1 (Lodge et al. 2012; Apothéloz-Perret-Gentil et al. 2017). validity assumption restricted time point eDNA sampled. Thus, irrelevant taxon varies release DNA across season, long DNA released proportionate taxon density time sampling. reason, hydrological variables (discharge velocity) assumed constant time (space!) across duration sampling campaign. instance, multiple days required perform eDNA sampling across sampling sites, days assumed constitute unique time point, hydrological conditions can adequately represented time-averaged values discharge velocity. decay DNA assumed expressed first order kinetics (.e., rate change DNA concentration decreases linearly time). Similarly production rate, assumed single value decay time representative given taxon given time point.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"sampling-design","dir":"Articles","previous_headings":"The eDITH model in a nutshell > Overview and underlying assumptions","what":"Sampling design","title":"An introduction to eDITH","text":"spatial extent eDNA sampling must adequately cover entire river network, order allow model make robust predictions. rule thumb, one sampling site per 10–20 km2 drained area. Moreover, main tributaries river network sampled spatially hierarchical design. Ideally, sampling sites located just upstream confluence, independent signals joining tributaries can gauged. See (Carraro, Stauffer, Altermatt 2021) information optimal eDNA sampling strategies. mean distance (along river network) eDNA samples large, otherwise eDNA found upstream site totally depleted reaching next downstream site. case, eDITH model make inferences based multiple sites. make example, consider first order kinetics, water velocity 1 ms-1 decay time 4 h (.e., half life 2.77 h), able measure 50% concentration measure 10 km upstream, 3% concentration measure 50 km upstream2. rule thumb, sites 50 km apart (along river network) considered independent samples. See also (Deiner Altermatt 2014; Pont et al. 2018) respect transport distances eDNA. Finally, model assumes eDNA well mixed water column, /samples site adequately span river cross section (e.g., sampling banks centre, large rivers, small rivers sampling single bank might sufficient, assuming eDNA sufficiently well mixed). Analogous care taken choice representative sampling volume filtered (Altermatt et al. 2023).","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"measurement-errors","dir":"Articles","previous_headings":"The eDITH model in a nutshell > Overview and underlying assumptions","what":"Measurement errors","title":"An introduction to eDITH","text":"Variability DNA detection sampling (e.g., filtration) laboratory procedures (e.g. DNA extraction, Polymerase Chain Reaction (PCR), sequencing) introduce systematic bias DNA concentrations across samples. eDITH used model metabarcoding data, expected read count given site given taxon assumed proportional underlying DNA concentration. Replicated eDNA measures site time point treated independent measures. distinctions made whether physical (.e., different water samples) laboratory (different PCR runs) replicates.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"what-taxa-can-be-modelled","dir":"Articles","previous_headings":"The eDITH model in a nutshell > Overview and underlying assumptions","what":"What taxa can be modelled?","title":"An introduction to eDITH","text":"principle, eDITH model suitable aquatic macroorganisms shed DNA stream water. Nonetheless, model can also extended microorganisms sampled entirety (e.g., free floating bacteria), case upstream sources can considered biofilm colonies, decay time refer DNA molecules rather bacteria lifetime. eDITH model make distinction whether eDNA data referred assigned taxon (say, species, genus family level) unassigned cluster OTUs ASVs. matters assumptions production decay rates (see DNA production decay rates) must hold. principle, also possible estimate spatial distribution terrestrial, rather aquatic, taxa, provided assumption proportionality DNA production rate taxon density holds. case, spatial unit predictions performed subcatchment, .e., portion land directly drains towards associated reach.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"river-network-model","dir":"Articles","previous_headings":"The eDITH model in a nutshell > Overview and underlying assumptions","what":"River network model","title":"An introduction to eDITH","text":"domain eDITH model applied river network discretized reaches, .e. segments river interrupted confluences treated smallest spatial units. reach considered node network, ensemble reaches covers entire river network. assumed reaches internal variability (e.g., exact coordinates sampling site matter, provided sampling site associated reach). Note along-stream distance two consecutive confluences can covered sequence different reaches, allow finer discretization river network. Indeed, number maximum length reaches can tuned using function aggregate_river rivnet. See also (Carraro, Bertuzzo, et al. 2020) documentation OCNet package details aggregation river network reaches.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"lakes-and-braided-channels","dir":"Articles","previous_headings":"The eDITH model in a nutshell > Overview and underlying assumptions","what":"Lakes and braided channels","title":"An introduction to eDITH","text":"eDITH model designed work river networks containing lakes reservoirs. Dynamics eDNA lakes still largely unclear, large residence times water particles lakes compared river reach imply dissolved DNA entering lake either degrades retained substrate particles. Particle-bound DNA can eventually resuspended (Shogren et al. 2017), likely occurs long time scales (say, monthly, yearly even longer), hence assumption first-order decay kinetics single decay time value across river network violated. Similarly, river networks produced rivnet admit bifurcations downstream direction (e.g., braided artificial channels creating loops river network). Hence, different braids channels treated independent reaches eDITH model. case, eDITH model still applied considering single channel conceptual equivalent multiple real braids channels.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"the-governing-equations","dir":"Articles","previous_headings":"The eDITH model in a nutshell","what":"The governing equations","title":"An introduction to eDITH","text":"main equation eDITH model results mass balance eDNA across cross-section river, reads: \\[\\begin{equation} C_j = \\frac{1}{Q_j}\\sum_{\\\\gamma(j)} p_i A_{S,} \\exp\\left(-\\frac{L_{ij}}{\\overline{v_{ij}} \\tau}\\right) \\end{equation}\\] : \\(C_j\\) DNA concentration sampling site \\(j\\) (strictly speaking, \\(j\\) reach sampling site located); \\(Q_j\\) water discharge \\(j\\); \\(\\gamma(j)\\) identifies set reaches upstream \\(j\\); \\(p_i\\) DNA production rate upstream reach \\(\\); \\(A_{S,}\\) source area \\(\\) (.e., extent node; considering river reach aquatic taxon, e.g. equal product length width); \\(L_{ij}\\) length along-stream path joining \\(\\) \\(j\\); \\(\\overline{v_{ij}}\\) average water velocity along \\(L_{ij}\\); \\(\\tau\\) characteristic decay time DNA stream water. Assuming morphology hydrology river network known (thus lengths, areas discharges), equation links DNA concentrations unknown parameters \\(\\tau\\) \\(\\mathbf{p}=\\left( p_1, \\dots, p_N\\right)\\) (\\(N\\) total number reaches). former linked behaviour DNA stream water (principle measured, least value constrained), estimation latter actual goal eDITH model. Contrasting observed modelled DNA concentrations thus enables estimation maps \\(\\mathbf{p}\\) across \\(N\\) reaches constituting river network, hence relative taxon density, given initial assumption. often convenient (modelling interpretation viewpoint) express DNA production rate \\(p_i\\) function environmental covariates, possibly related spatial patterns investigated taxon: \\[\\begin{equation} p_i = p_0 \\exp\\left( \\boldsymbol\\beta^T \\mathbf{X}() \\right) \\end{equation}\\] \\(\\mathbf{X}()\\) vector covariates evaluated reach \\(\\); \\(\\boldsymbol\\beta\\) vector covariate effect sizes; \\(p_0\\) baseline production rate, .e., DNA production rate site covariates null level. reduces number unknowns \\(N\\) (size \\(\\mathbf{p}\\)) number selected covariates (length \\(\\boldsymbol\\beta\\)) plus one (\\(p_0\\)). eDNA data form read counts, equations remain applicable. Indeed, \\(C_j\\) play role expected read number site \\(j\\) (proportional underlying DNA concentration, per initial hypothesis). Consequently, \\(\\mathbf{p}\\) case represent DNA production rates multiplied constant proportionality.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"estimating-detection-probability","dir":"Articles","previous_headings":"The eDITH model in a nutshell","what":"Estimating detection probability","title":"An introduction to eDITH","text":"model parameters estimated (either via Bayesian method likelihood maximization), possible transform DNA production rates \\(\\mathbf{p}\\) corresponding detection probabilities. done exploiting assumption probability distribution used model measurement errors (hence formulate likelihood, see Likelihood function model parameters). particular, done calculating, reach \\(j\\), expected eDNA value \\(\\widetilde{C_j}\\) (concentration read count) reach detached river network (, absence upstream inputs, water discharge reach equal locally produced discharge3). transformed detection probability value, calculated probability observing non-null eDNA value assumed error probability distribution expected value \\(\\widetilde{C_j}\\). -obtained detection probability maps can transformed presence-absence maps used assess biodiversity patterns (e.g., Carraro, Blackman, Altermatt 2023).","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"required-data","dir":"Articles","previous_headings":"","what":"Required data","title":"An introduction to eDITH","text":"eDNA data must provided data field run_eDITH_BT run_eDITH_optim data frame components values (eDNA values measured given taxon given time point) ID (identifiers network nodes (.e., reaches) AG level4 sampling sites located). identify latter, function locate_site rivnet can used. river network must provided river object, obtained via rivnet package. fundamental river aggregated reaches (via aggregate_river) contains hydrological data, discharges water velocities can used input eDITH model. can obtained via hydro_river function rivnet. simplest setting, single value discharge (depth) width, necessarily reach, required order extrapolate hydraulic variables across whole network. exact method hydrological variables extrapolated river network depends number type data provided; please refer documentation hydro_river details. Optionally, covariates can passed run_eDITH_BT run_eDITH_optim data frame. Function covariate_river rivnet allows computing covariate values raster maps river object. covariates provided, asymmetric eigenvector maps (AEMs) calculated river network used covariates. AEMs (Blanchet, Legendre, Borcard 2008) mutually orthogonal spatial variables obtained spatial filtering technique considers space asymmetric way, thus suitable model species distributions river networks. course possible combine user-provided covariates AEMs, detailed flowchart : Flowchart choice covariates used fit eDITH model.","code":""},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"likelihood-function-and-model-parameters","dir":"Articles","previous_headings":"","what":"Likelihood function and model parameters","title":"An introduction to eDITH","text":"default, eDITH implements four probability distributions model errors observed modelled data: normal (ll.type = \"norm\") log-normal (ll.type = \"lnorm\") distributions suitable model DNA concentration data. geometric (ll.type = \"geom\") negative binomial (ll.type = \"nbinom\") distributions suitable read count data. Note user expected set option ll.type according nature data provided run_eDITH_BT run_eDITH_optim. Moreover, optional argument .det = TRUE can used produce zero-inflated error distribution. mandatory ll.type = \"lnorm\", log-normal distribution admit zeros. Default model parameters follows: tau represents decay time \\(\\tau\\) hours. log_p0 logarithm base 10 baseline production rate \\(p_0\\). units \\(p_0\\) equal units inputted data$values multiplied length unit divided time unit. instance, data$values contains DNA concentration data mol m-3 river object contains discharge (river$AG$discharge) m3s-1 areas5 m2, \\(p_0\\) expressed mol m-2 s-1 (.e. amount DNA shed per unit area unit time). case read count data, unit \\(p_0\\) might look weird; , case, \\(p_0\\) embeds constant transforms expected DNA concentration predicted model expected read number. beta_X effect size covariate X, X replaced object names covariates data frame (provided), /e.g. AEM1 AEM eigenfunctions used. case, number indicates corresponding eigenfunction. Additional parameters can added depending likelihood definition: sigma standard deviation error (ll.type = \"norm\" \"lnorm\"). Note , log-normal distribution used, sigma standard deviation non-log-transformed values (hence different parameter sdlog dlnorm). omega overdispersion parameter (ll.type = \"nbinom\"), defined ratio variance mean (Lindén Mäntyniemi 2011). additional error parameter present ll.type = \"geom\". Cstar parameter added optional argument .det = TRUE passed. case, probability non-detection expressed exp(-C/Cstar), C modelled eDNA value (expected concentration read number) given site. Increased Cstar increases non-detection probability, else equal. See Carraro et al. (2018) details.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"generating-a-river-object","dir":"Articles","previous_headings":"A minimal example","what":"Generating a river object","title":"An introduction to eDITH","text":"illustrate functioning eDITH, let’s run example river Wigger (Switzerland), whose river object can called via data(wigger). object can built via rivnet package follows. Please refer rivnet documentation details functions.","code":"# Extract river from DEM river <- rivnet::extract_river(outlet=c(637478,237413),                     EPSG=21781, #CH1903/LV03 coordinate system                     ext=c(6.2e5,6.6e5,2e5,2.5e5),                     z=9)  # Aggregate river - default thrA and maxReachLength = 2500 m river <- rivnet::aggregate_river(river, maxReachLength = 2500)  # Hydraulic data: width = 8 m, discharge = 15 m3/s at the outlet hydrodata <- data.frame(data = c(8, 15),                          type = c(\"w\", \"Q\"),                          node = river$AG$outlet*c(1, 1))  # Assign hydraulic variables across the river network river <- rivnet::hydro_river(hydrodata, river)  # Attribute landcover classes as covariates r1 <- terra::rast(system.file(\"extdata/landcover.tif\",                         package = \"rivnet\")) river <- rivnet::covariate_river(r1, river)"},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"preparing-and-displaying-edna-data","dir":"Articles","previous_headings":"A minimal example","what":"Preparing and displaying eDNA data","title":"An introduction to eDITH","text":"example DNA concentration data given target taxon can called : dataC contains following objects: ID: identifiers river network nodes AG levels eDNA sampled (can retrieved via rivnet::locate_site based site coordinates). values: corresponding values DNA concentration measured (mol m-3) dataC contains eDNA values 24 sampling sites, sampled three times. case, three different eDNA values inserted dataC independent rows: can use function rivnet::points_colorscale display mean DNA concentration values across sampling sites:","code":"data(dataC) dataC[which(dataC$ID==2),] #>    ID       values #> 1   2 0.000000e+00 #> 25  2 1.037331e-12 #> 49  2 8.176798e-13 sites <- unique(dataC$ID) values <- numeric(length(sites)) for (ind in 1:length(sites)){   s <- sites[ind]   values[ind] <- mean(dataC$values[dataC$ID==s]) }  plot(river) rivnet::points_colorscale(river$AG$X[unique(dataC$ID)], river$AG$Y[unique(dataC$ID)],                           values) title(\"Mean observed DNA concentration [mol m-3]\")"},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"running-the-edith-model","dir":"Articles","previous_headings":"A minimal example","what":"Running the eDITH model","title":"An introduction to eDITH","text":"can define set covariates containing main landcover classes (urban areas, agricultural areas forest) addition elevation log-scaled drainage area:","code":"covariates <- data.frame(urban = river$SC$locCov$landcover_1,                          agriculture = river$SC$locCov$landcover_2,                          forest = river$SC$locCov$landcover_3,                          elev = river$AG$Z,                          log_drainageArea = log(river$AG$A))"},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"bayesian-methods","dir":"Articles","previous_headings":"A minimal example > Running the eDITH model","what":"Bayesian methods","title":"An introduction to eDITH","text":"can use Bayesian approach fit eDITH model. Function run_eDITH_BT interfaces BayesianTools package, contains several different Bayesian samplers. default choice run_eDITH_BT DREAMzs (Carraro, Blackman, Altermatt 2023). can run eDITH -specified covariates: default option ll.type norm, suitable DNA concentration data. Alternatively, can run eDITH via AEM covariates. default, first 10% AEM eigenfunctions used covariates.","code":"set.seed(1) out.bt.cov <- run_eDITH_BT(dataC, river, covariates) set.seed(1) out.bt.aem <- run_eDITH_BT(dataC, river)"},{"path":"https://lucarraro.github.io/eDITH/articles/eDITH.html","id":"optimization","dir":"Articles","previous_headings":"A minimal example > Running the eDITH model","what":"Optimization","title":"An introduction to eDITH","text":"Alternatively, optimization method can used estimate best-fit parameters eDITH model. Function run_eDITH_optim internally calls optim default Nelder-Mead method. main options covariates ll.type work way run_eDITH_BT: illustrative purposes, use reduced number AEM eigenfunctions (10) single optimization attempt. advisable increase number optimization attempts (default settings) ensure convergence. can qualitatively check goodness fit model:  also display modelled concentrations across river network, using rivnet’s plot method:  Finally, can look predicted map relative taxon density (.e., DNA production rate \\(\\mathbf{p}\\))  corresponding detection probability \\(\\mathbf{p_D}\\):","code":"set.seed(27) out.opt.aem <- run_eDITH_optim(dataC, river, n.AEM = 10,      n.attempts = 1) plot(out.opt.aem$C[dataC$ID], dataC$values,       xlim=c(0,8e-12), ylim=c(0, 8e-12), asp=1,      xlab = \"Modelled concentration [mol m-3]\",       ylab = \"Observed concentration [mol m-3]\") abline(0,1) plot(river, out.opt.aem$C, colLevels=c(0, max(values), 1000), addLegend = FALSE,       colPalette = hcl.colors(1000, \"Reds 3\", rev=T)) rivnet::points_colorscale(river$AG$X[unique(dataC$ID)], river$AG$Y[unique(dataC$ID)],                           values) title(\"DNA concentration [mol m-3]\") plot(river, out.opt.aem$p) title('DNA production rate [mol m-2 s-1]') plot(river, out.opt.aem$probDet) title('Detection probability')"},{"path":[]},{"path":"https://lucarraro.github.io/eDITH/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luca Carraro. Maintainer, author. Florian Altermatt. Author. University Zurich. Copyright holder, funder.","code":""},{"path":"https://lucarraro.github.io/eDITH/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carraro L, Altermatt F (2024). eDITH: Model Transport Environmental DNA River Networks. R package version 0.2.0.9000, https://github.com/lucarraro/eDITH, https://lucarraro.github.io/eDITH/.","code":"@Manual{,   title = {eDITH: Model Transport of Environmental DNA in River Networks},   author = {Luca Carraro and Florian Altermatt},   year = {2024},   note = {R package version 0.2.0.9000, https://github.com/lucarraro/eDITH},   url = {https://lucarraro.github.io/eDITH/}, }"},{"path":"https://lucarraro.github.io/eDITH/index.html","id":"edith-","dir":"","previous_headings":"","what":"Model Transport of Environmental DNA in River Networks","title":"Model Transport of Environmental DNA in River Networks","text":"R package model transport environmental DNA river networks","code":""},{"path":"https://lucarraro.github.io/eDITH/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Model Transport of Environmental DNA in River Networks","text":"eDITH (eDNA Integrating Transport Hydrology) allows interpreting environmental DNA data collected river networks. implements eDITH model, couples geomorphological hydrological characterization catchment, eDNA transport decay dynamics, species distribution model, allows transforming pointwise eDNA data collected catchment predicted maps taxon density. Features: provides estimations detection probability taxon across whole catchment based spatially replicated eDNA data can handle eDNA concentration data (e.g., qPCR) metabarcoding (read counts) data Model fit can performed via Bayesian techniques optimization algorithms Covariates can specified user /selected means Asymmetric Eigenvector Maps (AEMs) interface DHARMa package residual diagnostics provided eDITH requires use river networks defined river objects, can built via rivnet package.","code":""},{"path":"https://lucarraro.github.io/eDITH/index.html","id":"installing-the-package","dir":"","previous_headings":"","what":"Installing the package","title":"Model Transport of Environmental DNA in River Networks","text":"eDITH can installed CRAN: development version can installed Github:","code":"install.packages(\"eDITH\") devtools::install_github(\"lucarraro/eDITH\")"},{"path":"https://lucarraro.github.io/eDITH/reference/dataC.html","id":null,"dir":"Reference","previous_headings":"","what":"eDNA concentration data — dataC","title":"eDNA concentration data — dataC","text":"dataset consists triplicate eDNA measurements 24 sampling sites.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/dataC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eDNA concentration data — dataC","text":"","code":"data(dataC)"},{"path":"https://lucarraro.github.io/eDITH/reference/dataC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eDNA concentration data — dataC","text":"data frame containing location eDNA sampling sites river Wigger (dataC$ID) eDNA concentration values (dataC$values) (mol m-3) given taxon.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/dataRead.html","id":null,"dir":"Reference","previous_headings":"","what":"eDNA read number data — dataRead","title":"eDNA read number data — dataRead","text":"dataset consists triplicate eDNA measurements 24 sampling sites.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/dataRead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eDNA read number data — dataRead","text":"","code":"data(dataRead)"},{"path":"https://lucarraro.github.io/eDITH/reference/dataRead.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eDNA read number data — dataRead","text":"data frame containing location eDNA sampling sites river Wigger (dataRead$ID) eDNA read number values (dataRead$values) given taxon.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eDITH-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Transport of Environmental DNA In River Networks — eDITH-package","title":"Model Transport of Environmental DNA In River Networks — eDITH-package","text":"Runs eDITH (eDNA Integrating Transport Hydrology) model,   implements mass balance eDNA transport river network scale    coupled species distribution model obtain maps species distribution.    eDITH can work eDNA concentration (e.g., obtained via qPCR)    metabarcoding (read count) data. Parameter estimation can performed    via Bayesian techniques (via BayesianTools package) optimization   algorithms. interface DHARMa package posterior predictive   checks provided.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eDITH-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model Transport of Environmental DNA In River Networks — eDITH-package","text":"Luca Carraro (luca.carraro@hotmail.)","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eDITH-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model Transport of Environmental DNA In River Networks — eDITH-package","text":"Carraro, L., Hartikainen, H., Jokela, J., Bertuzzo, E., Rinaldo, . (2018). Estimating species distribution abundance river networks using environmental DNA. Proceedings National Academy Sciences United States America, 115(46), 11724-11729. doi:10.1073/pnas.1813843115 Carraro, L., Maechler, E., Wuethrich, R., Altermatt, F. (2020). Environmental DNA allows upscaling spatial patterns biodiversity freshwater ecosystems. Nature Communications, 11(1) doi:10.1038/s41467-020-17337-8 Carraro, L., Stauffer, J. B., Altermatt, F. (2021). design optimal eDNA sampling strategies biomonitoring river networks. Environmental DNA, 3(1), 157-172. doi:10.1002/edn3.137 Carraro, L., Blackman, R. C., Altermatt, F. (2023). Modelling environmental DNA transport rivers reveals highly resolved spatio-temporal biodiversity patterns. Scientific Reports, 13(1) doi:10.1038/s41598-023-35614-6","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eval_posterior_eDITH.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","title":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","text":"Function evaluates relevant quantities posterior sample parameters eDITH model","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eval_posterior_eDITH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","text":"","code":"eval_posterior_eDITH(x, river, quant = 0.5)"},{"path":"https://lucarraro.github.io/eDITH/reference/eval_posterior_eDITH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","text":"x List produced run_eDITH_BT. river river object generated via aggregate_river. quant Vector quantiles.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eval_posterior_eDITH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","text":"Add details.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eval_posterior_eDITH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","text":"output list copies objects input x list. following objects added: p_quantile Selected quantiles (along rows) posterior distribution production rates. C_quantile Selected quantiles (along rows) posterior distribution eDNA values  (concentrations read numbers). probDet_quantile Selected quantiles (along rows) posterior distribution detection probability. p_mean Mean posterior distribution production rates. C_mean Mean posterior distribution eDNA values (concentrations read numbers). probDet_mean Mean posterior distribution detection probability. objects vectors length river$AG$nNodes. However, custom likelihood used  run_eDITH_BT, probDet_quantile probDet_mean evaluated,  replaced vector zero length.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/eval_posterior_eDITH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate posterior predictions from an eDITH run — eval_posterior_eDITH","text":"","code":"library(rivnet) data(wigger) data(outSample) out <- eval_posterior_eDITH(outSample, wigger) plot(wigger, out$p_mean)"},{"path":"https://lucarraro.github.io/eDITH/reference/outSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior sample from fitted eDITH model — outSample","title":"Posterior sample from fitted eDITH model — outSample","text":"produced via: covariates <- data.frame(urban=wigger$SC$locCov$landcover_1,                          agriculture=wigger$SC$locCov$landcover_2,                          forest=wigger$SC$locCov$landcover_3,                          elev=wigger$AG$Z,                          log_drainageArea=log(wigger$AG$)) set.seed(1) outSample <- run_eDITH_BT(dataC, wigger, covariates,                             mcmc.settings=list(iterations=9e5, burnin = 6e5, message = TRUE, thin = 30))","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/outSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior sample from fitted eDITH model — outSample","text":"","code":"data(outSample)"},{"path":"https://lucarraro.github.io/eDITH/reference/outSample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Posterior sample from fitted eDITH model — outSample","text":"list.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/posterior_pred_sim_eDITH.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","title":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","text":"function performs predictive posterior simulations run eDITH model (via run_eDITH_BT). can used diagnostics purposes, particular assess scaled (quantile) residuals via  DHARMa package.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/posterior_pred_sim_eDITH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","text":"","code":"posterior_pred_sim_eDITH(x, river, nParamSets = 10000, nDrawsPerParamSet = 10,    verbose = FALSE)"},{"path":"https://lucarraro.github.io/eDITH/reference/posterior_pred_sim_eDITH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","text":"x List produced run_eDITH_BT. river river object generated via aggregate_river. nParamSets Number unique parameter sets sampled posterior distribution. nDrawsPerParamSet Number simulations run per parameter set. verbose Logical. updates printed console?","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/posterior_pred_sim_eDITH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","text":"nParamSets can higher number unique parameter sets posterior distribution,  since sampling posterior parameter sets operated replacement.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/posterior_pred_sim_eDITH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","text":"matrix dimensions length(x$data$ID)--nParamSets*nDrawsPerParamSet. column  predictive posterior simulation. row corresponds site eDNA data observed  (corresponding entries argument data run_eDITH_BT. Matrix entries eDNA values (either concentrations read numbers) predicted model given predictive posterior simulation given observational site.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/eDITH/reference/posterior_pred_sim_eDITH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictive posterior simulations from an eDITH run — posterior_pred_sim_eDITH","text":"","code":"library(DHARMa) #> This is DHARMa 0.4.6. For overview type '?DHARMa'. For recent changes, type news(package = 'DHARMa') data(outSample) data(wigger) data(dataC) pps <- posterior_pred_sim_eDITH(outSample, wigger, nParamSets = 1000)  # reduced nParamSets for illustrative purposes  sim.out <- createDHARMa(pps, dataC$values) #> No fitted predicted response provided, using the mean of the simulations plot(sim.out)"},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_BT.html","id":null,"dir":"Reference","previous_headings":"","what":"Run eDITH with BayesianTools — run_eDITH_BT","title":"Run eDITH with BayesianTools — run_eDITH_BT","text":"Function runs Bayesian sampler estimating parameters eDITH model","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_BT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run eDITH with BayesianTools — run_eDITH_BT","text":"","code":"run_eDITH_BT(data, river, covariates = NULL, Z.normalize = TRUE,            use.AEM = FALSE, n.AEM = NULL, par.AEM = NULL,            no.det = FALSE, ll.type = \"norm\", source.area = \"AG\",            mcmc.settings = NULL, likelihood = NULL,         prior = NULL, sampler.type = \"DREAMzs\",            tau.prior = list(spec = \"lnorm\", a = 0, b = Inf,        meanlog = log(5), sd = sqrt(log(5) - log(4))),            log_p0.prior = list(spec=\"unif\",min=-20, max=0),            beta.prior = list(spec=\"norm\",sd=1),            sigma.prior = list(spec=\"unif\",min=0, max=max(data$values, na.rm = TRUE)),            omega.prior = list(spec=\"unif\",min=1, max=10*max(data$values, na.rm = TRUE)),            Cstar.prior = list(spec=\"unif\",min=0, max=max(data$values, na.rm = TRUE)),        verbose = FALSE)"},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_BT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run eDITH with BayesianTools — run_eDITH_BT","text":"data eDNA data. Data frame containing columns ID (index AG node/reach    eDNA sample taken) values (value eDNA measurement, expressed concentration   number reads). river river object generated via aggregate_river. covariates Data frame containing covariate values river reaches. NULL (default   option), production rates estimated via AEMs. Z.normalize Logical. covariates Z-normalized? use.AEM Logical. eigenvectors based AEMs used covariates? covariates = NULL,    set TRUE. TRUE covariates provided, AEM eigenvectors appended    covariates data frame. n.AEM Number AEM eigenvectors (sorted decreasing respective eigenvalue) used covariates.     par.AEM$moranI = TRUE, parameter used. Instead, eigenvectors significantly positive spatial    autocorrelation used AEM covariates. par.AEM List additional parameters passed river_to_AEM calculation AEMs.    particular, par.AEM$moranI = TRUE imposes use AEM covariates significantly positive spatial    autocorrelation based Moran's statistic. .det Logical. probability non-detection included model? ll.type Character. String defining error distribution used log-likelihood formulation.    Allowed values norm (normal distribution), lnorm (lognormal distribution),    nbinom (negative binomial distribution) geom (geometric distribution). two latter choices    suited eDNA data expressed read numbers, norm lnorm better suited    eDNA concentrations. source.area Defines extent source area node. Possible values \"AG\" (source   area reach surface, .e. length*width), \"SC\" (source area subcatchment area), ,   alternatively, vector length river$AG$nodes. mcmc.settings List. passed argument settings runMCMC. Default    list(iterations = 2.7e6, burnin=1.8e6, message = TRUE, thin = 10). likelihood Likelihood function passed likelihood argument createBayesianSetup.   specified, generated based arguments .det ll.type. custom likelihood specified,    custom prior must also specified. prior Prior function passed prior argument createBayesianSetup.   specified, generated based *.prior arguments provided. user-defined prior provided,   parameter names must included prior$lower, prior$upper (see example). sampler.type Character. passed argument sampler runMCMC. tau.prior List defines prior distribution decay time parameter tau. See details. log_p0.prior List defines prior distribution logarithm (base 10) baseline production rate    p0.  See details. covariates = NULL, defines prior distribution logarithm (base 10)    production rates river reaches. beta.prior List defines prior distribution covariate effects beta. See details. single    spec provided, prior distribution specified beta parameters. Alternatively,    spec (arguments, provided) vector length equal number covariates included,    different prior distributions can specified different beta parameters. sigma.prior List defines prior distribution standard deviation measurement error   ll.type  \"norm\" \"lnorm\". used ll.type = \"nbinom\". See details. omega.prior List defines prior distribution overdispersion parameter omega    measurement error ll.type = \"nbinom\". used  ll.type \"norm\" \"lnorm\".   See details. Cstar.prior List defines prior distribution Cstar parameter controlling probability   detection. used .det = TRUE. See details. verbose Logical. console output displayed?","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_BT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run eDITH with BayesianTools — run_eDITH_BT","text":"arguments type *.prior consist lists  arguments required dtrunc  (except first argument x). default, AEMs computed without attributing weights edges  river network.  Use e.g. par.AEM = list(weight = \"gravity\") attribute weights.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_BT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run eDITH with BayesianTools — run_eDITH_BT","text":"list objects: param_map Vector named parameters corresponding maximum posteriori estimate. output call MAP. p_map Vector best-fit eDNA production rates corresponding maximum posteriori parameter  estimate param_map. length equal river$AG$nNodes. C_map Vector best-fit eDNA values (unit data$values, .e. concentrations read numbers)  corresponding maximum posteriori parameter  estimate param_map. length equal river$AG$nNodes. probDet_map Vector best-fit detection probabilities corresponding maximum posteriori parameter estimate param_map. length equal river$AG$nNodes. custom likelihood provided, vector null length (case user calculate probability detection independently, based chosen likelihood). cI Output call getCredibleIntervals. gD Output call gelmanDiagnostics. covariates Data frame containing input covariate values (possibly Z-normalized). source.area Vector source area values. outMCMC Object class mcmcSampler returned call runMCMC. Moreover, arguments ll.type (possibly changed \"custom\" custom likelihood specified), .det data added list.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_BT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run eDITH with BayesianTools — run_eDITH_BT","text":"","code":"data(wigger) data(dataC) data(dataRead)  # reduce number of iterations for illustrative purposes  # (use default mcmc.settings to ensure convergence) settings.short <- list(iterations = 1e3, thin = 10) set.seed(1) out <- run_eDITH_BT(dataC, wigger, mcmc.settings = settings.short) #> Covariates not specified. Production rates will be estimated #>                       based on the first n.AEM = 26 AEMs.  #>   Running DREAM-MCMC, chain  1 iteration 300 of 1002 . Current logp  1718.183 1854.383 1815.865 Please wait!    Running DREAM-MCMC, chain  1 iteration 600 of 1002 . Current logp  1747.124 1860.675 1856.744 Please wait!    Running DREAM-MCMC, chain  1 iteration 900 of 1002 . Current logp  1751.218 1860.362 1858.926 Please wait!    Running DREAM-MCMC, chain  1 iteration 1002 of 1002 . Current logp  1860.589 1860.362 1866.549 Please wait!  #> runMCMC terminated after 2.108seconds #> gelmanDiagnostics could not be calculated, possibly there is not enoug variance in your MCMC chains. Try running the sampler longer  # \\donttest{ library(rivnet) # best-fit (maximum a posteriori) map of eDNA production rates plot(wigger, out$p_map)   # best-fit map (maximum a posteriori) of detection probability plot(wigger, out$probDet_map)    # compare best-fit vs observed eDNA concentrations plot(out$C_map[dataC$ID], dataC$values,   xlab=\"Modelled (MAP) concentrations\", ylab=\"Observed concentrations\") abline(a=0, b=1)    ## fit eDNA read number data - use AEMs as covariates out <- run_eDITH_BT(dataRead, wigger, ll.type = \"nbinom\",   par.AEM = list(weight = \"gravity\"),   mcmc.settings = settings.short) # use default mcmc.settings to ensure convergence #> Covariates not specified. Production rates will be estimated #>                       based on the first n.AEM = 26 AEMs.  #>   Running DREAM-MCMC, chain  1 iteration 300 of 1002 . Current logp  -686.9741 -665.4549 -898.7046 Please wait!    Running DREAM-MCMC, chain  1 iteration 600 of 1002 . Current logp  -604.4475 -612.4648 -784.337 Please wait!    Running DREAM-MCMC, chain  1 iteration 900 of 1002 . Current logp  -435.4761 -500.5367 -738.2181 Please wait!    Running DREAM-MCMC, chain  1 iteration 1002 of 1002 . Current logp  -435.4761 -500.5367 -738.2181 Please wait!  #> runMCMC terminated after 2.614seconds #> gelmanDiagnostics could not be calculated, possibly there is not enoug variance in your MCMC chains. Try running the sampler longer  ## use user-defined covariates covariates <- data.frame(urban = wigger$SC$locCov$landcover_1,                          agriculture = wigger$SC$locCov$landcover_2,                          forest = wigger$SC$locCov$landcover_3,                          elev = wigger$AG$Z,                          log_drainageArea = log(wigger$AG$A))               out.cov <-   run_eDITH_BT(dataC, wigger, covariates,    mcmc.settings = settings.short) # use default mcmc.settings to ensure convergence #>   Running DREAM-MCMC, chain  1 iteration 300 of 1002 . Current logp  1879.684 1875.527 1892.416 Please wait!    Running DREAM-MCMC, chain  1 iteration 600 of 1002 . Current logp  1889.913 1878.238 1892.246 Please wait!    Running DREAM-MCMC, chain  1 iteration 900 of 1002 . Current logp  1889.309 1888.549 1890.724 Please wait!    Running DREAM-MCMC, chain  1 iteration 1002 of 1002 . Current logp  1898.566 1889.417 1891.649 Please wait!  #> runMCMC terminated after 0.662000000000003seconds  # use user-defined covariates and AEMs out.covAEM <-   run_eDITH_BT(dataC, wigger, covariates,    use.AEM = TRUE, par.AEM = list(weight = \"gravity\"),   mcmc.settings = settings.short) # use default mcmc.settings to ensure convergence   #>   Running DREAM-MCMC, chain  1 iteration 300 of 1002 . Current logp  1746.426 -29078.04 1805.56 Please wait!    Running DREAM-MCMC, chain  1 iteration 600 of 1002 . Current logp  1762.692 1822.293 1807.302 Please wait!    Running DREAM-MCMC, chain  1 iteration 900 of 1002 . Current logp  1792.439 1822.293 1807.302 Please wait!    Running DREAM-MCMC, chain  1 iteration 1002 of 1002 . Current logp  1792.439 1822.293 1807.302 Please wait!  #> runMCMC terminated after 2.239seconds #> gelmanDiagnostics could not be calculated, possibly there is not enoug variance in your MCMC chains. Try running the sampler longer  # use AEMs with significantly positive spatial autocorrelation out.AEM.moran <- run_eDITH_BT(dataC, wigger, use.AEM = TRUE,   par.AEM = list(weight = \"gravity\", moranI = TRUE),    mcmc.settings = settings.short) # use default mcmc.settings to ensure convergence  #> Covariates not specified. Production rates will be estimated #>                       based on the first n.AEM = 26 AEMs.  #>   Running DREAM-MCMC, chain  1 iteration 300 of 1002 . Current logp  1606.697 1600.336 -180806.9 Please wait!    Running DREAM-MCMC, chain  1 iteration 600 of 1002 . Current logp  1611.237 1607.149 -119385.3 Please wait!    Running DREAM-MCMC, chain  1 iteration 900 of 1002 . Current logp  1607.692 1607.149 -119319.6 Please wait!    Running DREAM-MCMC, chain  1 iteration 1002 of 1002 . Current logp  1608.786 1628.349 -119319.6 Please wait!  #> runMCMC terminated after 8.028seconds #> gelmanDiagnostics could not be calculated, possibly there is not enoug variance in your MCMC chains. Try running the sampler longer  ## use posterior sample to specify user-defined prior library(BayesianTools) data(outSample) pp <- createPriorDensity(outSample$outMCMC) # Important! add parameter names to objects lower, upper names(pp$lower) <- names(pp$upper) <- colnames(outSample$outMCMC$chain[[1]])[1:8]  # the three last columns are for log-posterior, log-likelihood, log-prior  out.new <- run_eDITH_BT(dataC, wigger, covariates, prior = pp,    mcmc.settings = settings.short) #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #>   Running DREAM-MCMC, chain  1 iteration 300 of 1002 . Current logp  1277.972 998.5392 1194.398 Please wait!  #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #>   Running DREAM-MCMC, chain  1 iteration 600 of 1002 . Current logp  1444.823 1017.773 1358.49 Please wait!  #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #>   Running DREAM-MCMC, chain  1 iteration 900 of 1002 . Current logp  1444.823 1284.865 1365.387 Please wait!  #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #>   Running DREAM-MCMC, chain  1 iteration 1002 of 1002 . Current logp  1444.823 1495.063 1388.418 Please wait!  #> runMCMC terminated after 3.386seconds #> gelmanDiagnostics could not be calculated, possibly there is not enoug variance in your MCMC chains. Try running the sampler longer    # }"},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize eDITH — run_eDITH_optim","title":"Optimize eDITH — run_eDITH_optim","text":"Function performs search optimal parameters eDITH model","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize eDITH — run_eDITH_optim","text":"","code":"run_eDITH_optim(data, river, covariates = NULL, Z.normalize = TRUE,            use.AEM = FALSE, n.AEM = NULL, par.AEM = NULL,            no.det = FALSE, ll.type = \"norm\", source.area = \"AG\",            likelihood = NULL, sampler = NULL, n.attempts = 100,         par.optim = NULL,         tau.prior = list(spec=\"lnorm\",a=0,b=Inf,        meanlog=log(5), sd=sqrt(log(5)-log(4))),            log_p0.prior = list(spec=\"unif\",min=-20, max=0),            beta.prior = list(spec=\"norm\",sd=1),            sigma.prior = list(spec=\"unif\",min=0, max=1*max(data$values, na.rm = TRUE)),            omega.prior = list(spec=\"unif\",min=1, max=10*max(data$values, na.rm = TRUE)),            Cstar.prior = list(spec=\"unif\",min=0, max=1*max(data$values, na.rm = TRUE)),        verbose = FALSE)"},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize eDITH — run_eDITH_optim","text":"data eDNA data. Data frame containing columns ID (index AG node/reach    eDNA sample taken) values (value eDNA measurement, expressed concentration   number reads). river river object generated via aggregate_river. covariates Data frame containing covariate values river reaches. NULL (default   option), production rates estimated via AEMs. Z.normalize Logical. covariates Z-normalized? use.AEM Logical. eigenvectors based AEMs used covariates? covariates = NULL,    set TRUE. TRUE covariates provided, AEM eigenvectors appended    covariates data frame. n.AEM Number AEM eigenvectors (sorted decreasing respective eigenvalue) used covariates.     par.AEM$moranI = TRUE, parameter used. Instead, eigenvectors significantly positive spatial    autocorrelation used AEM covariates. par.AEM List additional parameters passed river_to_AEM calculation AEMs.    particular, par.AEM$moranI = TRUE imposes use AEM covariates significantly positive spatial    autocorrelation based Moran's statistic. .det Logical. probability non-detection included model? ll.type Character. String defining error distribution used log-likelihood formulation.    Allowed values norm (normal distribution), lnorm (lognormal distribution),    nbinom (negative binomial distribution) geom (geometric distribution). two latter choices    suited eDNA data expressed read numbers, norm lnorm better suited    eDNA concentrations. source.area Defines extent source area node. Possible values \"AG\" (source   area reach surface, .e. length*width), \"SC\" (source area subcatchment area), ,   alternatively, vector length river$AG$nodes. likelihood Likelihood function. specified, generated based    arguments .det ll.type. sampler Function generating sets initial parameter values optimization algorithm. NULL,    initial parameter values drawn default prior distributions run_eDITH_BT. See details. n.attempts Number times optimizing function optim executed. time, sampler used    draw initial parameter set. par.optim List parameters passed optim. default, likelihood maximized (.e.,    control$fnscale = -1), maximum number iterations set 1e6. default optimization method    \"Nelder-Mead\" (default optim). tau.prior, log_p0.prior,beta.prior,sigma.prior,omega.prior,Cstar.prior Prior distribution relevant   parameters eDITH model. verbose Logical. console output displayed?","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_optim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize eDITH — run_eDITH_optim","text":"function attempts maximize log-posterior (sum log-likelihood log-prior) via  non-linear optimization function optim. specified user, sampler must function produces output \"named num\"  vector parameters. Parameter names must likelihood. See example. default, AEMs computed without attributing weights edges  river network.  Use e.g. par.AEM = list(weight = \"gravity\") attribute weights.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize eDITH — run_eDITH_optim","text":"list objects: p Vector best-fit eDNA production rates corresponding optimum parameter  estimates param. length equal river$AG$nNodes. C Vector best-fit eDNA values (unit data$values, .e. concentrations read numbers)  corresponding optimum parameter  estimates param. length equal river$AG$nNodes. probDet Vector best-fit detection probabilities corresponding optimum parameter estimate param_map. length equal river$AG$nNodes. custom likelihood provided, vector null length (case user calculate probability detection independently, based chosen likelihood). param Vector named parameters corresponding best-fit estimate. covariates Data frame containing input covariate values (possibly Z-normalized). source.area Vector source area values. out_optim List provided optim. result call optim (n.attempts) yielding highest likelihood exported. attempts.stats List containing relevant output different optimization attempts. contains lp  (vector maximized log-posterior values single attempt), counts (total function evaluations), conv  (convergence flags produced optim), tau (best-fit decay time values h). Moreover, arguments ll.type (possibly changed \"custom\" custom likelihood specified), .det data added list.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize eDITH — run_eDITH_optim","text":"","code":"data(wigger) data(dataC) data(dataRead)  ## fit eDNA concentration data - use AEMs as covariates set.seed(9) out <- run_eDITH_optim(dataC, wigger, n.AEM = 10,    n.attempts = 1) # reduced n.AEM, n.attempts for illustrative purposes   # it is recommended to attempt optimization several times to ensure convergence  # \\donttest{ library(rivnet) # best-fit map of eDNA production rates plot(wigger, out$p)   # best-fit map of detection probability plot(wigger, out$probDet)   # compare best-fit vs observed eDNA concentrations plot(out$C[dataC$ID], dataC$values,   xlab = \"Modelled concentrations\", ylab = \"Observed concentrations\") abline(a=0, b=1)    ## fit eDNA read number data - use AEMs as covariates set.seed(5) out <- run_eDITH_optim(dataRead, wigger, ll.type = \"nbinom\",        par.AEM = list(weight = \"gravity\"),        n.attempts = 1) # reduced n.attempts for illustrative purposes  ## use user-defined covariates covariates <- data.frame(urban = wigger$SC$locCov$landcover_1,                          agriculture = wigger$SC$locCov$landcover_2,                          forest = wigger$SC$locCov$landcover_3,                          elev = wigger$AG$Z,                          log_drainageArea = log(wigger$AG$A))  set.seed(2)              out.cov <-   run_eDITH_optim(dataC, wigger, covariates, n.attempts = 1)  # reduced n.attempts for illustrative purposes    # use user-defined covariates and AEMs set.seed(1) out.covAEM <- run_eDITH_optim(dataC, wigger, covariates, use.AEM = TRUE,           par.AEM = list(weight = \"gravity\"),           n.attempts = 1) # reduced n.attempts for illustrative purposes           # use AEMs with significantly positive spatial autocorrelation set.seed(1) out.AEM.moran <- run_eDITH_optim(dataC, wigger, use.AEM = TRUE,   par.AEM = list(weight = \"gravity\", moranI = TRUE),    n.attempts = 1) # reduced n.attempts for illustrative purposes    # define sampler function when the first 10 AEMs are used as covariates samp_fun <- function(n){ # input argument needed but not used     mins = c(0, -20, rep(-5,10), 0)     maxs = c(10, 0, rep(5,10), 5e-12)     nams = c(\"tau\", \"log_p0\", paste0(\"beta_AEM\",1:10), \"sigma\")     vec <- runif(numeric(13), min=mins, max=maxs)     names(vec) <- nams     return(vec)} set.seed(1) out.samp <- run_eDITH_optim(dataC, wigger, n.AEM = 10,      sampler = samp_fun,   n.attempts = 1) # reduced n.attempts for illustrative purposes # }"},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Run eDITH for a single parameter set — run_eDITH_single","title":"Run eDITH for a single parameter set — run_eDITH_single","text":"Function runs eDITH model given parameter set","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run eDITH for a single parameter set — run_eDITH_single","text":"","code":"run_eDITH_single(param, river, covariates,  Z.normalize = TRUE,          no.det = FALSE, ll.type = NULL,          data = NULL, source.area = \"AG\",                 tau.prior = list(spec=\"lnorm\",a=0,b=Inf,            meanlog=log(5), sd=sqrt(log(5)-log(4))),                 log_p0.prior = list(spec=\"unif\",min=-20, max=0),                     beta.prior = list(spec=\"norm\",sd=1),                 sigma.prior = list(spec=\"unif\",min=0,            max=max(data$values, na.rm = TRUE)),                 omega.prior = list(spec=\"unif\",min=1,            max=10*max(data$values, na.rm = TRUE)),                  Cstar.prior = list(spec=\"unif\",min=0,            max=max(data$values, na.rm = TRUE)))"},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run eDITH for a single parameter set — run_eDITH_single","text":"param Parameter set. named vector, names: tau Decay time (expressed h). log_p0 Natural logarithm baseline production rate. beta_X Effect size covariate X. must many beta_X columns covariates.    X must name corresponding column covariates. omega, sigma, Cstar Parameters estimation log-likelihood detection probability.    required ll.type provided. river river object generated via aggregate_river. covariates Data frame containing covariate values river reaches. Z.normalize Logical. covariates Z-normalized? .det Logical. probability non-detection included model? ll.type Character. String defining error distribution used log-likelihood formulation.    Allowed values norm (normal distribution), lnorm (lognormal distribution),    nbinom (negative binomial distribution) geom (geometric distribution). two latter choices    suited eDNA data expressed read numbers, norm lnorm better suited    eDNA concentrations. data eDNA data. Data frame containing columns ID (index AG node/reach    eDNA sample taken) values (value eDNA measurement, expressed concentration   number reads). source.area Defines extent source area node. Possible values \"AG\" (source   area reach surface, .e. length*width), \"SC\" (source area subcatchment area), ,   alternatively, vector length river$AG$nodes. tau.prior, log_p0.prior,beta.prior,sigma.prior,omega.prior,Cstar.prior Prior distribution relevant   parameters eDITH model. used ll.type data provided.","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run eDITH for a single parameter set — run_eDITH_single","text":"list objects: p Vector eDNA production rates corresponding parameter  set param. length equal river$AG$nNodes. C Vector eDNA values (concentrations read numbers) corresponding parameter set param.  length equal river$AG$nNodes. probDet Vector detection probabilities corresponding parameter set param. computed  ll.type provided.  length equal river$AG$nNodes. logprior Value log-prior distribution (computed ll.type data provided). loglik Value log-likelihood distribution (computed ll.type data provided). logpost Value log-posterior distribution (computed ll.type data provided).","code":""},{"path":[]},{"path":"https://lucarraro.github.io/eDITH/reference/run_eDITH_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run eDITH for a single parameter set — run_eDITH_single","text":"","code":"library(rivnet) data(wigger)  # calculate AEMs and use the first 10 as covariates ae <- river_to_AEM(wigger) covariates <- data.frame(ae$vectors[,1:10]) names(covariates) <- paste0(\"AEM\",1:10)  # covariates names must correspond to param names set.seed(1); param <- c(3,-15, runif(10,-1,1)) names(param) <- c(\"tau\", \"log_p0\", paste0(\"beta_AEM\",1:10)) # param names must correspond to covariates names  out <- run_eDITH_single(param, wigger, covariates)  # add parameter sigma and compute detection probability param <- c(param, 5e-12)  names(param)[length(param)] <- \"sigma\" # note that the value of sigma has to be within the range indicated by sigma.prior out2 <- run_eDITH_single(param, wigger, covariates, ll.type=\"norm\")  # include data and compute logprior, loglikelihood, logposterior data(dataC) out3 <- run_eDITH_single(param, wigger, covariates,      ll.type=\"norm\", data=dataC)"},{"path":"https://lucarraro.github.io/eDITH/reference/wigger.html","id":null,"dir":"Reference","previous_headings":"","what":"River Wigger — wigger","title":"River Wigger — wigger","text":"built via wigger <- extract_river(outlet=c(637478,237413),                     EPSG=21781,                      ext=c(6.2e5,6.6e5,2e5,2.5e5),                     z=9) wigger <- aggregate_river(wigger, maxReachLength = 2500) hydrodata <- data.frame(data=c(8, 15), type=c(\"w\",\"Q\"), node=wigger$AG$outlet*c(1,1)) wigger <- hydro_river(hydrodata, wigger) r1 <- rast(system.file(\"extdata/landcover.tif\", package=\"rivnet\")) wigger <- covariate_river(r1, wigger)","code":""},{"path":"https://lucarraro.github.io/eDITH/reference/wigger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"River Wigger — wigger","text":"","code":"data(wigger)"},{"path":"https://lucarraro.github.io/eDITH/reference/wigger.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"River Wigger — wigger","text":"river object. See extract_river documentation details.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"minor-changes-0-2-0-9000","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"eDITH 0.2.0.9000","text":"run_eDITH_optim: attempts.stats exported.","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"edith-020","dir":"Changelog","previous_headings":"","what":"eDITH 0.2.0","title":"eDITH 0.2.0","text":"CRAN release: 2024-01-16","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"major-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"eDITH 0.2.0","text":"run_eDITH_optim: log-posterior now maximized. Default arguments prior distributions added.","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"eDITH 0.2.0","text":"run_eDITH_BT, run_eDITH_optim: updated error messages unsuitable input used. Vignette updated. BugReports link added DESCRIPTION.","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"bugs-fixed-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugs fixed","title":"eDITH 0.2.0","text":"run_eDITH_BT, run_eDITH_optim: bug fixed attribution names AEM covariates.","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"edith-012","dir":"Changelog","previous_headings":"","what":"eDITH 0.1.2","title":"eDITH 0.1.2","text":"CRAN release: 2023-10-24","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"minor-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"eDITH 0.1.2","text":"Vignette updated.","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"edith-011","dir":"Changelog","previous_headings":"","what":"eDITH 0.1.1","title":"eDITH 0.1.1","text":"CRAN release: 2023-10-15","code":""},{"path":"https://lucarraro.github.io/eDITH/news/index.html","id":"bugs-fixed-0-1-1","dir":"Changelog","previous_headings":"","what":"Bugs fixed","title":"eDITH 0.1.1","text":"Bug fixed calculation detection probability ll.type = geom.","code":""}]
